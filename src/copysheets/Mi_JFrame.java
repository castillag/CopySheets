package copysheets;


import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Guillermo Castilla
 */
public class Mi_JFrame extends javax.swing.JFrame {
       private static  File[] files;     
       private static  String fsalidaname;
       int nhoja;
       private static Exception threadException = null;
       private static Boolean exec = true;

    /**
     * Creates new form Mi_JFrame
     */
    public Mi_JFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton4 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COPY SHEETS");

        jButton1.setText("FILES SELECTION ");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("RUN");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Name of the New Output file with extension .xlsx ( without _ )");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Copy a Sheet from a set of selected Excel files to a new Excel file");

        jLabel3.setText("Number of the Sheet to copy (>=1):");

        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        jScrollPane2.setViewportView(jTextPane1);

        jButton4.setText("CLEAN");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton7.setText("EXIT");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton5.setText("SAVE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Information");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(69, 69, 69)
                .addComponent(jButton4)
                .addGap(40, 40, 40)
                .addComponent(jButton2)
                .addGap(31, 31, 31))
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(27, 27, 27)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(7, 7, 7)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton7)
                    .addComponent(jButton5))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       JFileChooser chooser = new JFileChooser();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
          JFileChooser jfc = new JFileChooser(System.getProperty("user.dir") + "\\testFiles");
        jfc.setFileFilter(new FileNameExtensionFilter("Excel files", "xlsx", "xls"));
        jfc.setMultiSelectionEnabled(true);
         int opcion = jfc.showOpenDialog(Mi_JFrame.this);
        
         files = jfc.getSelectedFiles();
         
         for (int i=0; i<files.length; i++) {
          //  System.out.println("files("+i+")="+files[i]);
            writeOutInfo("files("+i+")="+files[i]);
             
       //      System.out.println("files(2)="+files[2]);
          // compare(readFileAsList(files[0]), readFileAsList(files[1]));
}          
    
        if (opcion == JFileChooser.APPROVE_OPTION) {
           // System.out.println("1 "+jfc.getSelectedFile().getAbsolutePath());
          writeOutInfo("1 "+jfc.getSelectedFile().getAbsolutePath());
            
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
           try {
               // TODO add your handling code here:
           //    CopySheets.inicio(files,fsalidaname,nhoja);
               inicio(files,fsalidaname,nhoja);
           } catch (FileNotFoundException ex) {
               Logger.getLogger(Mi_JFrame.class.getName()).log(Level.SEVERE, null, ex);
           } catch (IOException ex) {
               Logger.getLogger(Mi_JFrame.class.getName()).log(Level.SEVERE, null, ex);
           }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
         JFileChooser jfc = new JFileChooser(System.getProperty("user.dir") + "\\testFiles");
        jfc.setFileFilter(new FileNameExtensionFilter("Excel files", "xlsx", "xls"));
        int opcion = jfc.showOpenDialog(Mi_JFrame.this);
      //  fsalidaname = jfc.getSelectedFile().getAbsolutePath();
        
        if (opcion == JFileChooser.APPROVE_OPTION) {
       
            fsalidaname = jfc.getSelectedFile().getAbsolutePath();
        }
        if (!fsalidaname.substring(fsalidaname.length() - 5, fsalidaname.length()).equals(".xlsx")) {
            fsalidaname += ".xlsx";
        }
        try {
            if (!(fsalidaname.substring(fsalidaname.length() - 5, fsalidaname.length()).equals(".xlsx")) && !(fsalidaname.substring(fsalidaname.length() - 4, fsalidaname.length()).equals(".xls"))) {
                JOptionPane.showMessageDialog(rootPane, "La salida debe ser un fichero xls o xlsx", "Atención", JOptionPane.WARNING_MESSAGE);
            }
       //     jTextField2.setText(resultFile);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "La salida debe ser un fichero xls o xlsx", "Atención", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // TODO add your handling code here:
         try {
            nhoja = Integer.parseInt(jTextField1.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "El campo \"Número de hoja\" debe ser un valor numérico entero", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jTextField1FocusLost
 //Botón para limpiar la ventana de salida de la app
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int a = JOptionPane.showConfirmDialog(rootPane, "¿Borrar la ventana de salida?", "Limpiar salida", JOptionPane.YES_NO_OPTION);
        if (a == JOptionPane.YES_OPTION) {
            try {
                jTextPane1.getDocument().remove(0, jTextPane1.getDocument().getLength());
            } catch (BadLocationException ex) {
                Logger.getLogger(Mi_JFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error al limpiar la ventana de salida", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int n = JOptionPane.showConfirmDialog(rootPane, "¿Desea salir de la aplicación?", "Salir de la aplicación", JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JFileChooser jfc = new JFileChooser(System.getProperty("user.dir") + "\\testFiles");
        jfc.setFileFilter(new FileNameExtensionFilter("Text files", "txt"));
        int opcion = jfc.showSaveDialog(Mi_JFrame.this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            String saveFile = jfc.getSelectedFile().getAbsolutePath();
            if (!saveFile.substring(saveFile.length() - 4, saveFile.length()).equals(".txt")) {
                saveFile += ".txt";
            }
            File fichero = new File(saveFile);
            if (fichero.exists()) {
                int n = JOptionPane.showConfirmDialog(rootPane, "Se sobrescribirá el fichero\n¿Desea continuar?", "Sobrescribir fichero", JOptionPane.YES_NO_OPTION);
                if (n == JOptionPane.YES_OPTION) {
                    try (BufferedWriter bw = new BufferedWriter(new FileWriter(fichero))) {
                        bw.write(jTextPane1.getText());
                    } catch (IOException ex) {
                        Logger.getLogger(Mi_JFrame.class.getName()).log(Level.SEVERE, null, ex);
                        int a = JOptionPane.showConfirmDialog(rootPane, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(fichero))) {
                    bw.write(jTextPane1.getText());
                } catch (IOException ex) {
                    Logger.getLogger(Mi_JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    int a = JOptionPane.showConfirmDialog(rootPane, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            JOptionPane.showMessageDialog(rootPane, "Fichero guardado en:\n" + saveFile, "Fichero guardado", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mi_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mi_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mi_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mi_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mi_JFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

 //-------------------------------------- MODULO COPYSHEETS
  /*
 * Este Programa copia hojas de ficheros excel en otro fichero excel
 * Hay que seleccionar los ficheros donde estan las hojas que se quieren
 * copiar, y el fichero nuevo a donde compiarlas
 * Hay que indicar el numero de hoja que se quiere copiar
 */


/**
* all credits go to
* http://www.coderanch.com/t/420958/open-source/Copying-sheet-excel-file-another
* in teh Forum: Other Open Source Projects
* and adapted by Guillermo Castilla
**/
/** 
 * @param newSheet the sheet to create from the copy. 
 * @param sheet the sheet to copy. 
 */  
public void copySheets(Sheet newSheet, Sheet sheet){     
    copySheets(newSheet, sheet, true);     
}     

/** 
 * @param newSheet the sheet to create from the copy. 
 * @param sheet the sheet to copy. 
 * @param copyStyle true copy the style. 
 */  
public void copySheets(Sheet newSheet, Sheet sheet, boolean copyStyle){     
    int maxColumnNum = 0;     
    Map<Integer, CellStyle> styleMap = (copyStyle) ? new HashMap<Integer, CellStyle>() : null;     
    for (int i = sheet.getFirstRowNum(); i <= sheet.getLastRowNum(); i++) {     
        Row srcRow = sheet.getRow(i);     
        Row destRow = newSheet.createRow(i);     
        if (srcRow != null) {     
            copyRow(sheet, newSheet, srcRow, destRow, styleMap);     
            if (srcRow.getLastCellNum() > maxColumnNum) {     
                maxColumnNum = srcRow.getLastCellNum();     
            }     
        }     
    }     
    for (int i = 0; i <= maxColumnNum; i++) {     
        newSheet.setColumnWidth(i, sheet.getColumnWidth(i));     
    }     
}     

/** 
 * @param srcSheet the sheet to copy. 
 * @param destSheet the sheet to create. 
 * @param srcRow the row to copy. 
 * @param destRow the row to create. 
 * @param styleMap - 
 */  
public void copyRow(Sheet srcSheet, Sheet destSheet, Row srcRow, Row destRow, Map<Integer, CellStyle> styleMap) {     
    // manage a list of merged zone in order to not insert two times a merged zone  
  Set<CellRangeAddressWrapper> mergedRegions = new TreeSet<CellRangeAddressWrapper>();     
    destRow.setHeight(srcRow.getHeight());     
    // reckoning delta rows  
    int deltaRows = destRow.getRowNum()-srcRow.getRowNum();  
    // pour chaque row  
    for (int j = srcRow.getFirstCellNum(); j <= srcRow.getLastCellNum(); j++) {     
        Cell oldCell = srcRow.getCell(j);   // ancienne cell  
        Cell newCell = destRow.getCell(j);  // new cell   
        if (oldCell != null) {     
            if (newCell == null) {     
                newCell = destRow.createCell(j);     
            }     
            // copy chaque cell  
            copyCell(oldCell, newCell, styleMap);     
            // copy les informations de fusion entre les cellules  
            //System.out.println("row num: " + srcRow.getRowNum() + " , col: " + (short)oldCell.getColumnIndex());  
            CellRangeAddress mergedRegion = getMergedRegion(srcSheet, srcRow.getRowNum(), (short)oldCell.getColumnIndex());     

            if (mergedRegion != null) {   
              //System.out.println("Selected merged region: " + mergedRegion.toString());  
              CellRangeAddress newMergedRegion = new CellRangeAddress(mergedRegion.getFirstRow()+deltaRows, mergedRegion.getLastRow()+deltaRows, mergedRegion.getFirstColumn(),  mergedRegion.getLastColumn());  
                //System.out.println("New merged region: " + newMergedRegion.toString());  
                CellRangeAddressWrapper wrapper = new CellRangeAddressWrapper(newMergedRegion);  
                if (isNewMergedRegion(wrapper, mergedRegions)) {  
                    mergedRegions.add(wrapper);  
                    destSheet.addMergedRegion(wrapper.range);     
                }     
            }     
        }     
    }                
}    

/** 
 * @param oldCell 
 * @param newCell 
 * @param styleMap 
 */  
public void copyCell(Cell oldCell, Cell newCell, Map<Integer, CellStyle> styleMap) {     
    if(styleMap != null) {     
        if(oldCell.getSheet().getWorkbook() == newCell.getSheet().getWorkbook()){     
            newCell.setCellStyle(oldCell.getCellStyle());     
        } else{     
            int stHashCode = oldCell.getCellStyle().hashCode();     
            CellStyle newCellStyle = styleMap.get(stHashCode);     
            if(newCellStyle == null){     
                newCellStyle = newCell.getSheet().getWorkbook().createCellStyle();     
                newCellStyle.cloneStyleFrom(oldCell.getCellStyle());     
                styleMap.put(stHashCode, newCellStyle);     
            }     
            newCell.setCellStyle(newCellStyle);     
        }     
    }     
    switch(oldCell.getCellType()) {     
        case Cell.CELL_TYPE_STRING:     
            newCell.setCellValue(oldCell.getStringCellValue());     
            break;     
      case Cell.CELL_TYPE_NUMERIC:     
            newCell.setCellValue(oldCell.getNumericCellValue());     
            break;     
        case Cell.CELL_TYPE_BLANK:     
            newCell.setCellType(XSSFCell.CELL_TYPE_BLANK);     
            break;     
        case Cell.CELL_TYPE_BOOLEAN:     
            newCell.setCellValue(oldCell.getBooleanCellValue());     
            break;     
        case Cell.CELL_TYPE_ERROR:     
            newCell.setCellErrorValue(oldCell.getErrorCellValue());     
            break;     
        case Cell.CELL_TYPE_FORMULA:     
            newCell.setCellFormula(oldCell.getCellFormula());     
            break;     
        default:     
            break;     
    }     

}     

/** 
 * Récupère les informations de fusion des cellules dans la sheet source pour les appliquer 
 * à la sheet destination... 
 * Récupère toutes les zones merged dans la sheet source et regarde pour chacune d'elle si 
 * elle se trouve dans la current row que nous traitons. 
 * Si oui, retourne l'objet CellRangeAddress. 
 *  
 * @param sheet the sheet containing the data. 
 * @param rowNum the num of the row to copy. 
 * @param cellNum the num of the cell to copy. 
 * @return the CellRangeAddress created. 
 */  
public CellRangeAddress getMergedRegion(Sheet sheet, int rowNum, short cellNum) {     
    for (int i = 0; i < sheet.getNumMergedRegions(); i++) {   
        CellRangeAddress merged = sheet.getMergedRegion(i);     
        if (merged.isInRange(rowNum, cellNum)) {     
            return merged;     
        }     
    }     
    return null;     
}     

/** 
 * Check that the merged region has been created in the destination sheet. 
 * @param newMergedRegion the merged region to copy or not in the destination sheet. 
 * @param mergedRegions the list containing all the merged region. 
 * @return true if the merged region is already in the list or not. 
 */  
private boolean isNewMergedRegion(CellRangeAddressWrapper newMergedRegion, Set<CellRangeAddressWrapper> mergedRegions) {  
  return !mergedRegions.contains(newMergedRegion);     
}     

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
/**
 * 
 * @param files ArrayList con los Ficheros de los que hay que copiar la hoja 5
 * @param f Fichero en el que hay que copiarlos
 * @throws FileNotFoundException
 * @throws IOException 
 */
public void inicio(File[] files, String fname, int nhoja ) throws FileNotFoundException, IOException  {
        // TODO code application logic here
  //  try{
        Workbook book = null;
        //------------------Datos de Entrada a modificar -------------------------
        int numero_de_ficheros = files.length;
        int numero_hoja = nhoja-1;
        FileInputStream [] hoja = new FileInputStream[numero_de_ficheros] ;        
        File f = new File(fname);
        if (f.exists()) {
                if (fname.endsWith("xlsx")) {
                    book = new XSSFWorkbook(new FileInputStream(fname));
               //      book = WorkbookFactory.create(new FileInputStream(fname));
                } else {
                    try {
                        throw new Exception("Debe ser un fichero Excel \"xlsx\"");
                    } catch (Exception ex) {
                        Logger.getLogger(Mi_JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                f.createNewFile();
                if (fname.endsWith("xlsx")) {
                   book = new XSSFWorkbook();
              //      book = WorkbookFactory.create(f);
                } else {
                    try {
                        throw new Exception("Debe ser un fichero Excel \"xlsx\"");
                    } catch (Exception ex) {
                        Logger.getLogger(Mi_JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        

        for (int i= 0; i<files.length;i++){
            hoja[i]= new FileInputStream(files[i]);
        }
  //------------------Fin de Datos de Entrada a modificar -------------------------
        
    //    book = new XSSFWorkbook();
        ArrayList<FileInputStream> inList;
        inList = new ArrayList();
        for (int i=0; i<numero_de_ficheros; i++){
                   inList.add(hoja[i]);
          }
       
       // System.out.println("Construido el Array de ficheros a importar");
         writeOutInfo("Construido el Array de ficheros a importar" + "\n");
//--------------------------------
        int i=0;
       for ( FileInputStream fin : inList) {
        Workbook b = new XSSFWorkbook(fin);
 //       Workbook b = WorkbookFactory.create(fin);
      //  for (int i = 0; i < b.getNumberOfSheets(); i++) {
        
            // not entering sheet name, because of duplicated names
            copySheets(book.createSheet(files[i].getName()),b.getSheetAt(numero_hoja));
       //     System.out.println("Importada la hoja "+numero_hoja+" del fichero "+files[i].getName());
            writeOutInfo("Importada la hoja "+numero_hoja+" del fichero "+files[i].getName());
            i++;
       }
//--------------------------------
       FileOutputStream fos = new FileOutputStream(f);
       book.write(fos);
       //System.out.println("Se ha escrito el fichero "+fname);
          writeOutInfo("Se ha escrito el fichero "+fname);
      // System.exit(0);
       
       
}  
    
       //Escritura en la ventana de salida de la interfaz

    private void writeOutInfo(String text) {
        try {
            StyledDocument doc = jTextPane1.getStyledDocument();
            doc.insertString(doc.getLength(), ("\n" + text), null);
            jScrollPane1.getVerticalScrollBar().setValue(doc.getLength());
            //System.out.println(doc.getLength());
        } catch (Exception e) {
            synchronized (exec) {
                exec = false;
            }
            threadException = new Exception("Error al escribir en la ventana de salida");
        }
    }
}
